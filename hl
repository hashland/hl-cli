#!/bin/sh

API_URL=https://api.hashland.cc

if [ ! -f $HOME/.hashland ]; then
	echo Create a file in your home directory containing the api key with 
	echo echo API_KEY=xxxyourxxxapixxxkeyxxx \>\$HOME/.hashland \&\& chmod 600 \$HOME/.hashland

	exit 1
fi

. $HOME/.hashland

_patch()
{
	ROUTE=$1
	PARAMS=$2
	curl -s -H "Authorization: Bearer $API_KEY" -X PATCH -d "$PARAMS" ${API_URL}/${ROUTE}
}

_put()
{
	ROUTE=$1
	PARAMS=$2
	curl -s -H "Authorization: Bearer $API_KEY" -X PUT -d "$PARAMS" ${API_URL}/${ROUTE}
}

_get()
{
	ROUTE=$1
	PARAMS=$2

	if [ ! -z "$PARAMS" ]; then
		ROUTE=$ROUTE\?$PARAMS
	fi

	curl -s -H "Authorization: Bearer $API_KEY" ${API_URL}/${ROUTE}
}

ethers()
{
	_get "miners" $1 | jq -r '.data.miners[] | select(.mac != "") | select(.mac != null) | .mac + " " + .ip'
}

ssh_miners()
{

	if [ -z $2 ]; then
		echo "missing SSH command"
		exit 1
	fi

	for ip in $(miners $1 | jq -r .ip); do
		echo ${ip}:
		ssh -oStrictHostKeyChecking=no root@$ip $2 $3 $4 $5 $6
	done	
}

ping_miners()
{
	for line in $(miners $1 | jq -r '.ip + "|" + .rack.name + "|" + .rack_position + "|" + .name'); do
		ip=$(echo $line | cut -f 1 -d "|")
		rack_name=$(echo $line | cut -f 2 -d "|")
		rack_position=$(echo $line | cut -f 3 -d "|")
		name=$(echo $line | cut -f 4 -d "|")

		echo -n "$ip $rack_name:$rack_position $name ... "

		ping -c1 ${ip} >/dev/null
		
		SUCCESS=$?
		if [ $SUCCESS = 0 ]; then
			echo OK
		else
			echo TIMEOUT
		fi

	done	

}

set_miner()
{
	if [ -z $1 ]; then
		echo Missing miner id
		exit 1
	fi

	if [ -z $2 ]; then
		echo Missing parameters
		exit 1
	fi

	_put "miners/$1" $2 | jq .data.miner
}

miners()
{
	_get "miners" $1 | jq .data.miners[] 
}

sensors()
{
	_get "sensors" $1 | jq .data.sensors[] 
}

temp() 
{
	sensors type=DH18S20 | jq -r '.name + ": " + .value' | sort
}

miner_types()
{
	_get "miner-types" $1 | jq .data.miner_types[]
}

pdu_power()
{
	_patch "pdus/$1/power" "pdu_slot=$2&state=$3"
}

pdus()
{
	_get "pdus" $1 | jq .data.pdus[]
}

pdu_types()
{
	_get "pdu-types" $1 | jq .data.pdu_types[]
}

sysimages()
{
	_get "hlos-sysimages" $1 | jq .data.hlos_sysimages[]
}

sysimage()
{
	NAME=$1
	VERSION=$2
	_get "hlos-sysimages/sysupgrade" "name=$NAME&version=$VERSION" | jq .data.hlos_sysimage
}

racks()
{
	_get "racks" $1 | jq .data.racks[]
}

dlsysimage()
{
	URL=$(sysimage $1 $2 | jq -r .url)
	if [ ! -z "$URL" ] && [ "$URL" != "null" ]; then
		BASENAME=$(basename "$URL")
		echo Downloading $BASENAME
		curl -o "$BASENAME" "$URL"
	fi
}

if [ -z $1 ]; then
	echo usage: hl dlsysimage\|ethers\|miners\|miner_types\|pdus\|pdu_types\|ping_miners\|racks\|sensors\|set_miner\|ssh_miners\|sysimage\|sysimages\|temp [param=value]
	echo 
	echo see https://github.com/hashland/hl-cli for examples
	echo
	exit 1
fi
	
$@

