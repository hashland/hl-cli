#!/bin/sh

API_URL=https://api.hashland.cc
TMPFILE=/tmp/hl.$$

if [ -z "$1" ]; then
	echo usage: hl dlsysimage\|ethers\|miners\|miner_types\|pdus\|pdu_types\|ping_miners\|racks\|sensors\|set_miner\|ssh_miners\|sysimage\|sysimages\|temp [param=value]
	echo 
	echo see https://github.com/hashland/hl-cli for examples
	echo
	exit 1
fi


if [ "$1" != "sysimage" -a -z "$HASHLAND_API_KEY" ]; then
	[ -f $HOME/.hashland ] && . $HOME/.hashland
	
	if [ -z "$HASHLAND_API_KEY" -a -x /sbin/uci ]; then
		HASHLAND_API_KEY=$(uci get hlos.@account[0].api_key)
	fi

	if [ -z "$HASHLAND_API_KEY" ]; then
		echo Missing HASHLAND_API_KEY, please specify it in your environment or create a .hashland file in your home directory 
		exit 1
	fi	
fi

_curl()
{
	METHOD=$1
	ROUTE=$2
        DATA=$3

	if [ -z "$HASHLAND_API_KEY" ]; then
		curl -s -X $METHOD -d "$DATA" ${API_URL}/${ROUTE} >$TMPFILE
	else
		curl -s -H "Authorization: Bearer $HASHLAND_API_KEY" -X $METHOD -d "$DATA" ${API_URL}/${ROUTE} >$TMPFILE
	fi
        
	
	MESSAGE=$(cat $TMPFILE | jq -r .message)

        if [ ! -z "$MESSAGE" ] && [ "$MESSAGE" != null ]; then
                >&2 echo $MESSAGE
                exit 1
        fi

        cat $TMPFILE
	rm $TMPFILE
}

_patch() { 
	_curl PATCH $1 $2 
}

_put() { 
	_curl $2 $3 
}

_get() { 
	_curl GET $1\?$2 "" 
}

_post() { 
	_curl POST $1 $2
}

ethers()
{
	_get "miners" $1 | jq -r '.data.miners[] | select(.mac != "") | select(.mac != null) | .mac + " " + .ip'
}

ssh_miners()
{

	if [ -z $2 ]; then
		echo "missing SSH command"
		exit 1
	fi

	for ip in $(miners $1 | jq -r .ip); do
		echo ${ip}:
		ssh -oStrictHostKeyChecking=no root@$ip $2 $3 $4 $5 $6
	done	
}

ping_miners()
{
	for line in $(miners $1 | jq -r '.ip + "|" + .mac + "|"  + .rack.name + "|" + .rack_position + "|" + .name'); do
		ip=$(echo $line | cut -f 1 -d "|")
		mac=$(echo $line | cut -f 2 -d "|")
		rack_name=$(echo $line | cut -f 3 -d "|")
		rack_position=$(echo $line | cut -f 4 -d "|")
		name=$(echo $line | cut -f 5 -d "|")

		desc="$ip $mac $rack_name:$rack_position $name ... "

		ping -c1 ${ip} >/dev/null
		
		SUCCESS=$?
		if [ $SUCCESS = 0 ]; then
			echo $desc OK
		else
			echo $desc TIMEOUT
		fi

	done	

}

set_miner()
{
	if [ -z $1 ]; then
		echo Missing miner id
		exit 1
	fi

	if [ -z $2 ]; then
		echo Missing parameters
		exit 1
	fi

	_put "miners/$1" $2 | jq .data.miner
}

miners()
{
	_get "miners" $1 | jq .data.miners[] 
}

sensors()
{
	_get "sensors" $1 | jq .data.sensors[] 
}

temp() 
{
	sensors type=DH18S20 | jq -r '.name + ": " + .value' | sort
}

miner_types()
{
	_get "miner-types" $1 | jq .data.miner_types[]
}

pdu_power()
{
	_patch "pdus/$1/power" "pdu_slot=$2&state=$3"
}

pdus()
{
	_get "pdus" $1 | jq .data.pdus[]
}

pdu_types()
{
	_get "pdu-types" $1 | jq .data.pdu_types[]
}

sysimages()
{
	_get "hlos-sysimages" $1 | jq .data.hlos_sysimages[]
}

create_sysimage()
{
	_post "hlos-sysimages" $1
}

sysimage()
{
	NAME=$1
	VERSION=$2
	_get "hlos-sysimages/sysupgrade" "name=$NAME&version=$VERSION" | jq .data.hlos_sysimage
}

racks()
{
	_get "racks" $1 | jq .data.racks[]
}

dlsysimage()
{
	URL=$(sysimage $1 $2 | jq -r .url)
	if [ ! -z "$URL" ] && [ "$URL" != "null" ]; then
		BASENAME=$(basename "$URL")
		echo Downloading $BASENAME
		curl -o "$BASENAME" "$URL"
	fi
}

$@

